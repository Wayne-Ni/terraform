name: CI/CD

on:
  push:
    branches:
      - dev
      - staging
      - main


concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-1
  DOCKERFILE: Dockerfile

jobs:
  deploy:
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
    runs-on: ubuntu-latest
    env:
      ENV: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
      TF_DIR: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
      ECR_REPO: ${{ github.ref_name == 'main' && 'myapp-prod' || github.ref_name == 'staging' && 'myapp-staging' || 'myapp-dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.ECR_REPO }}
          public: true

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}
          tags: |
            type=sha,format=short,prefix=${{ env.ENV }}-
            type=raw,value=${{ env.ENV }}-latest

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image tag output (env-shortsha)
        id: image
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "tag=${ENV}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -input=false -no-color

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve -no-color