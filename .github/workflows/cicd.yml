name: CI/CD

on:
  push:
    branches:
      - dev
      - staging
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-1
  DOCKERFILE: Dockerfile

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ENV: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
      TF_DIR: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
      ECR_REPO: ${{ github.ref_name == 'main' && 'myapp-prod' || github.ref_name == 'staging' && 'myapp-staging' || 'myapp-dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPO" >/dev/null

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}
          tags: |
            type=sha,format=short,prefix=${{ env.ENV }}-
            type=raw,value=${{ env.ENV }}-latest

      - name: Build and push Docker image (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image tag output (env-shortsha)
        id: image
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "tag=${ENV}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -input=false -no-color

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve -no-color
name: CI/CD

on:
  push:
    branches: [dev, staging, main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-1
  DOCKERFILE: Dockerfile

jobs:
  deploy:
    name: Deploy (${{ matrix.env }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - branch: dev
            env: dev
            tf_dir: dev
            ecr_repo: myapp-dev
            environment: dev
          - branch: staging
            env: staging
            tf_dir: staging
            ecr_repo: myapp-staging
            environment: staging
          - branch: main
            env: prod
            tf_dir: prod
            ecr_repo: myapp-prod
            environment: prod
    environment: ${{ matrix.environment }}
    env:
      RUN_FOR_THIS_MATRIX: ${{ github.ref_name == matrix.branch }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Optional: prepare toolchains for language builds outside Docker if needed
      - name: Set up Java (Gradle projects)
        if: env.RUN_FOR_THIS_MATRIX == 'true' && hashFiles('**/build.gradle*') != ''
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Configure AWS credentials (OIDC)
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        env:
          REPO: ${{ matrix.ecr_repo }}
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        run: |
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$REPO" >/dev/null

      - name: Extract Docker metadata
        id: meta
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}
          tags: |
            type=sha,format=short,prefix=${{ matrix.env }}-
            type=raw,value=${{ matrix.env }}-latest

      - name: Set up Docker Buildx
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image tag output (env-shortsha)
        id: image
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        env:
          ENV: ${{ matrix.env }}
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "tag=${ENV}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init (S3 backend)
        working-directory: terraform
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        env:
          TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
          TF_BACKEND_DDB_TABLE: ${{ secrets.TF_BACKEND_DDB_TABLE }}
        run: |
          terraform init -input=false -no-color \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=myapp/${{ matrix.env }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DDB_TABLE}"

      - name: Select/Create workspace
        working-directory: terraform
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        run: |
          terraform workspace select ${{ matrix.env }} 2>/dev/null || terraform workspace new ${{ matrix.env }}

      - name: Terraform Validate
        working-directory: terraform
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: terraform
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        run: |
          terraform plan -input=false -no-color \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="ecr_repo_name=${{ matrix.ecr_repo }}" \
            -var="ecs_cluster_name=${{ matrix.ecr_repo }}-cluster" \
            -var="ecs_service_name=${{ matrix.ecr_repo }}-service" \
            -var="image_tag=${{ steps.image.outputs.tag }}"

      - name: Terraform Apply
        working-directory: terraform
        if: env.RUN_FOR_THIS_MATRIX == 'true'
        run: |
          terraform apply -input=false -auto-approve -no-color \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="ecr_repo_name=${{ matrix.ecr_repo }}" \
            -var="ecs_cluster_name=${{ matrix.ecr_repo }}-cluster" \
            -var="ecs_service_name=${{ matrix.ecr_repo }}-service" \
            -var="image_tag=${{ steps.image.outputs.tag }}"

