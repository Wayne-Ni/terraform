name: CI/CD

on:
  push:
    branches:
      - dev
      - staging
      - main

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ap-northeast-1

permissions:
  contents: read
  security-events: write

jobs:
  build-and-test:
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
    runs-on: ubuntu-latest
    env:
      ENV: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }} 
      ECR_REPO: ${{ github.ref_name == 'main' && 'myapp-prod' || github.ref_name == 'staging' && 'myapp-staging' || 'myapp-dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Build Go binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -installsuffix cgo -o app .
          echo "Binary size: $(ls -lh app)"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ env.ECR_REPO }}
          public: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build Docker image using pre-built Go binary
      - name: Build Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.ENV }}-latest \
            -f Dockerfile \
            --load .

      - name: Trivy scan (local image)
        uses: aquasecurity/trivy-action@0.20.0
        continue-on-error: true
        with:
          scan-type: image
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.ENV }}-latest
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Push image to ECR
        if: hashFiles('trivy-results.sarif') != ''
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.ENV }}-latest

      - name: Upload image info artifact
        if: hashFiles('trivy-results.sarif') != ''
        run: |
          echo "ECR_REPO=${{ env.ECR_REPO }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ env.ENV }}-latest" >> $GITHUB_ENV
          echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

  deploy:
    needs: build-and-test
    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'main' && 'staging' || 'dev' }}
    runs-on: ubuntu-latest
    env:
      ENV: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}
      TF_DIR: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'staging' || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}          
  
      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        working-directory: ${{ env.TF_DIR }}
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -input=false -no-color

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -input=false -auto-approve -no-color